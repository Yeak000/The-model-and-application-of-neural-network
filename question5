import numpy as np
from numpy import log,exp,pi,max,min,sqrt,tanh
import pandas as pd
import matplotlib.pyplot as plt
np.random.seed(5)
city_location = {0: [0.1, 0.1], 1: [0.9, 0.5], 2: [0.9, 0.1], 3: [0.45, 0.9],
                 4: [0.9, 0.5], 5: [0.7, 0.9], 6: [0.1, 0.45], 7: [0.45, 0.1],
                 8: [0.3, 0.75], 9: [0.2, 0.1], 10: [0.31, 0.22], 11: [0.35, 0.25],
                 12: [0.1, 0.75], 13: [0.8, 0.35], 14: [0.12, 0.45], 15: [0.67, 0.17],
                 16: [0.85, 0.32], 17: [0.6, 0.9], 18: [0.7,0.15], 19: [0.66,0.22]}
N = len(city_location)



def get_d(city_loc: list[list] or np.array or dict) -> np.array:
    n = len(city_loc)
    d = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            d[i][j] = sqrt((city_loc[i][0]-city_loc[j][0])**2+(city_loc[i][1]-city_loc[j][1])**2)
    return d


def init_u(N, u0=0.1):
    # N = len(city_loc)
    U = np.random.uniform(-1, 1, (N, N)) + 0.5*u0 * log(N-1)
    return U


def init_v(N):
    # N = len(city_loc)
    a = np.arange(N)
    np.random.shuffle(a)
    V = np.eye(N)[a]
    return V


def du_dt(N, v, d, A, D):
    # N = len(city_loc)
    v1 = v[:, list(range(1, N))+[0]]
    du_dt = -A * (np.asarray([v.sum(0)]*N)-1) -\
            A * (np.asarray([v.sum(1)]*N).T-1) -\
            D * d @ v1
    return du_dt


def update_u(u, du_dt, delta_t=0.01):
    return u+du_dt*delta_t


def get_v(U0,u):
    return 0.5*(1+tanh(u/U0))


def energy(N,v,d,A=200,D=100):
    # N = len(city_loc)
    v1 = v[:, list(range(1, N))+[0]]
    E = A/2*(np.sum((v.sum(0)-1)**2)+np.sum((v.sum(1)-1)**2))+D/2 *\
        np.sum(d * (v1 @ v.T))
    return E
# def energy(N,v,d,A,D):
#     v1 = v[:, list(range(1, N)) + [0]]
#     t = d * v1
#     t = np.sum(V*t)
#     E = A/2*(np.sum((v.sum(0)-1)**2)+np.sum((v.sum(1)-1)**2))+D/2 * t
#     return E



def check_V(N, v):
    newv = np.zeros((N,N))
    for k in range(N):
        pos_l = np.argsort(-v[:,k]) #第k列从大到小排序索引
        sum_k = np.sum(newv[:,:k],axis=1) #前k-1列 列和
        for j in pos_l:
            if sum_k[j] == 0:
                newv[j][k] = 1
                break
    return newv


d = get_d(city_location)
U = init_u(N, u0=0.02)
U0 = 0.02
# V = init_v(N)
A = 500
D = 250
V = get_v(U0,U)
E_list=[]
for i in range(10000):
    du_dt1 = du_dt(N, V, d, A, D)
    U = update_u(U, du_dt1, delta_t=0.00002)
    V = get_v(U0, U)
    E = energy(N, V, d, A, D)
    if i % 100 == 0:
        print(E)
    E_list.append(E)

plt.plot(range(len(E_list)-10),E_list[10:])
plt.xlabel('iteration')
plt.ylabel('E')
nv = check_V(N, V)
x_list,y_list = [],[]
for m in list(range(N)):
    x_list.append(city_location[m][0])
    y_list.append(city_location[m][1])
    
visit_order = []
for o in range(N):
    visit_order.append(np.argmax(nv[:,o]))

plt.figure(2)
plt.scatter(x_list,y_list,color='blue')
plt.xlabel('x')
plt.ylabel('y')
x = np.asarray(x_list)[visit_order]
y = np.asarray(y_list)[visit_order]
plt.plot(x,y)
